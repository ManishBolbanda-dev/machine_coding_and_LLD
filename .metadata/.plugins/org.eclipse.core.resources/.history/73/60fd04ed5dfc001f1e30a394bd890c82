package service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import models.Board;
import models.Player;

public class BoardService {
	
	Map<Integer, Integer> movePositions;
	private Board board;
	private final int SIX = 6;
	
	
	public BoardService(Board board) {
		this.board = board;
		this.movePositions = new HashMap<>();
	}
	
	void loadSnakesAndLadders(){
		this.board.getSnakes().forEach(s  -> movePositions.put(s.getFrom(), s.getTo()));
		this.board.getLadders().forEach(lad  -> movePositions.put(lad.getFrom(), lad.getTo()));
	}
	void shufflePlayer() {
		// shuffle players
	}
	List<Player> startGame(){
		List<Player> winners = new ArrayList<>();
		
		while(this.board.getPlayers().size()>1) {
			Player cp = this.board.getCurrentPlayer();
			int diceValue = this.board.getDice().roll();
			int sixCount = 0;
			while(diceValue == this.SIX) {
				sixCount++;
				int newPosition = cp.getCurrentPosition()+diceValue ; 
				if( newPosition <= this.board.getEnd()) {
					cp.setCurrentPosition(newPosition);
				}
				if(newPosition == this.board.getEnd()) {
					winners.add(cp);
					break;
				}
				diceValue = this.board.getDice().roll();
			}
			
			if(newPosition == this.board.getEnd()) {
				winners.add(cp);
				break;
			}
		}
		return winners;
	}

	private void updatePlayerPosition(Player cp, int diceValue) {
		int newPosition = cp.getCurrentPosition()+diceValue ; 
		if( newPosition <= this.board.getEnd()) {
			cp.setCurrentPosition(newPosition);
		}
		
	}
}
